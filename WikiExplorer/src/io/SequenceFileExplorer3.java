/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package io;

import tool.gui.ChartFrame;
import chart.simple.MultiChart;
import com.ibm.icu.util.Calendar;
import com.ibm.icu.util.GregorianCalendar;
import data.series.Messreihe;
import hadoopts.core.TSBucket;
import hadoopts.topics.wikipedia.LocalWikipediaNetwork2;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JPanel;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.Text;
import org.apache.mahout.math.NamedVector;
import org.apache.mahout.math.VectorWritable;

/**
 *
 * @author root
 */
public class SequenceFileExplorer3 extends javax.swing.JFrame {

    /**
     * Creates new form SequenceFileExplorer
     */
    public SequenceFileExplorer3() {
        initComponents();
        tool.gui.GUITool.fullScreen(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtLF = new javax.swing.JTextField();
        jlZ = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtJAHR = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtMONAT = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtTAG = new javax.swing.JTextField();
        jlL = new javax.swing.JLabel();
        jtL = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jcbRAW = new javax.swing.JCheckBox();
        jcbMW = new javax.swing.JCheckBox();
        jcbRATIO = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jcbWT = new javax.swing.JCheckBox();
        jcbDT = new javax.swing.JCheckBox();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tool/Bundle"); // NOI18N
        setTitle(bundle.getString("SequenceFileExplorer.title")); // NOI18N

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setViewportView(jList1);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("io/Bundle"); // NOI18N
        jTabbedPane1.addTab(bundle1.getString("SequenceFileExplorer3.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(bundle1.getString("SequenceFileExplorer3.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 886, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(bundle1.getString("SequenceFileExplorer3.jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(787, 230));

        jTextField1.setText(bundle1.getString("SequenceFileExplorer3.jTextField1.text")); // NOI18N

        jButton3.setText(bundle1.getString("SequenceFileExplorer3.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(bundle1.getString("SequenceFileExplorer3.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle1.getString("SequenceFileExplorer3.jLabel1.text")); // NOI18N

        jtLF.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jtLF.setText(bundle1.getString("SequenceFileExplorer3.jtLF.text")); // NOI18N

        jlZ.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jlZ.setText(bundle1.getString("SequenceFileExplorer3.jlZ.text")); // NOI18N

        jTextField3.setText(bundle1.getString("SequenceFileExplorer3.jTextField3.text")); // NOI18N
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField3FocusLost(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle1.getString("SequenceFileExplorer3.jPanel6.border.title"))); // NOI18N

        jLabel2.setText(bundle1.getString("SequenceFileExplorer3.jLabel2.text")); // NOI18N

        jtJAHR.setText(bundle1.getString("SequenceFileExplorer3.jtJAHR.text")); // NOI18N

        jLabel3.setText(bundle1.getString("SequenceFileExplorer3.jLabel3.text")); // NOI18N

        jtMONAT.setText(bundle1.getString("SequenceFileExplorer3.jtMONAT.text")); // NOI18N

        jLabel4.setText(bundle1.getString("SequenceFileExplorer3.jLabel4.text")); // NOI18N

        jtTAG.setText(bundle1.getString("SequenceFileExplorer3.jtTAG.text")); // NOI18N

        jlL.setText(bundle1.getString("SequenceFileExplorer3.jlL.text")); // NOI18N

        jtL.setText(bundle1.getString("SequenceFileExplorer3.jtL.text")); // NOI18N

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText(bundle1.getString("SequenceFileExplorer3.jRadioButton1.text")); // NOI18N

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText(bundle1.getString("SequenceFileExplorer3.jRadioButton2.text")); // NOI18N

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText(bundle1.getString("SequenceFileExplorer3.jRadioButton3.text")); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtJAHR, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(3, 3, 3)
                        .addComponent(jtMONAT, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton2)
                                .addGap(0, 68, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jlL)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtTAG, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(jtL))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtJAHR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtMONAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jtTAG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlL)
                    .addComponent(jtL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle1.getString("SequenceFileExplorer3.jPanel7.border.title"))); // NOI18N

        jcbRAW.setSelected(true);
        jcbRAW.setText(bundle1.getString("SequenceFileExplorer3.jcbRAW.text")); // NOI18N

        jcbMW.setSelected(true);
        jcbMW.setText(bundle1.getString("SequenceFileExplorer3.jcbMW.text")); // NOI18N

        jcbRATIO.setSelected(true);
        jcbRATIO.setText(bundle1.getString("SequenceFileExplorer3.jcbRATIO.text")); // NOI18N

        jCheckBox1.setSelected(true);
        jCheckBox1.setText(bundle1.getString("SequenceFileExplorer3.jCheckBox1.text")); // NOI18N

        jcbWT.setText(bundle1.getString("SequenceFileExplorer3.jcbWT.text")); // NOI18N

        jcbDT.setText(bundle1.getString("SequenceFileExplorer3.jcbDT.text")); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbMW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbRATIO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbWT)
                            .addComponent(jcbDT)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jcbRAW)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbRAW)
                    .addComponent(jCheckBox1))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbMW)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbRATIO)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jcbWT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcbDT)))
                .addContainerGap())
        );

        jButton5.setText(bundle1.getString("SequenceFileExplorer3.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText(bundle1.getString("SequenceFileExplorer3.jButton6.text")); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel5.setText(bundle1.getString("SequenceFileExplorer3.jLabel5.text")); // NOI18N

        jButton1.setText(bundle1.getString("SequenceFileExplorer3.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(247, 247, 247))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(1, 1, 1)
                        .addComponent(jtLF, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jlZ, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 23, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jtLF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jlZ))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle1.getString("SequenceFileExplorer3.jPanel5.border.title"))); // NOI18N
        jPanel5.setMinimumSize(new java.awt.Dimension(100, 48));
        jPanel5.setPreferredSize(new java.awt.Dimension(571, 48));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 886, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel5, java.awt.BorderLayout.PAGE_END);

        fileMenu.setMnemonic('f');
        fileMenu.setText(bundle1.getString("SequenceFileExplorer3.fileMenu.text")); // NOI18N

        openMenuItem.setMnemonic('o');
        openMenuItem.setText(bundle1.getString("SequenceFileExplorer3.openMenuItem.text")); // NOI18N
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText(bundle1.getString("SequenceFileExplorer3.saveMenuItem.text")); // NOI18N
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText(bundle1.getString("SequenceFileExplorer3.saveAsMenuItem.text")); // NOI18N
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText(bundle1.getString("SequenceFileExplorer3.exitMenuItem.text")); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText(bundle1.getString("SequenceFileExplorer3.editMenu.text")); // NOI18N

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText(bundle1.getString("SequenceFileExplorer3.cutMenuItem.text")); // NOI18N
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText(bundle1.getString("SequenceFileExplorer3.copyMenuItem.text")); // NOI18N
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText(bundle1.getString("SequenceFileExplorer3.pasteMenuItem.text")); // NOI18N
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText(bundle1.getString("SequenceFileExplorer3.deleteMenuItem.text")); // NOI18N
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText(bundle1.getString("SequenceFileExplorer3.helpMenu.text")); // NOI18N

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText(bundle1.getString("SequenceFileExplorer3.contentsMenuItem.text")); // NOI18N
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText(bundle1.getString("SequenceFileExplorer3.aboutMenuItem.text")); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {

            // Prozedur für einzelnes File aus dem Cluster ...
            getFileName();
            initFileSystem();
            getMetaData2(true);
            listContent(Integer.MAX_VALUE, "");
            // listContent( Integer.MAX_VALUE, "part-r-00001" );

            for (int i = 0; i < z; i++) {

                openFrame4Index(i);

            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
//        JFileChooser jfc = new JFileChooser();
//        jfc.setSize(800, 600);
//        jfc.setCurrentDirectory(new File("/home/kamir/bin/WikiExplorer/WikiExplorer"));
//        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
//
//        jfc.showOpenDialog(this);
//        File f = jfc.getSelectedFile();
//
//        jTextField2.setText(f.getAbsolutePath());
//
//        String ff = "/user/kamir/wikipedia/corpus/" + f.getName().substring(0, f.getName().length() - 4);
//        jTextField1.setText(ff + "_merged");


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusLost
        // TODO add your handling code here:
        this.jTextField1.setText("/user/kamir/wikipedia/corpus/" + this.jTextField3.getText() + "_merged/part-r-00000");
        this.jtLF.setText("/home/kamir/bin/WikiExplorer/WikiExplorer/merged_listfile_" + this.jTextField3.getText() + ".lst");
    }//GEN-LAST:event_jTextField3FocusLost

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try {

            // Prozedur für einzelnes File aus dem Cluster ...
            getFileName();
            initFileSystem();
            getMetaData2(true);
            listContent(Integer.MAX_VALUE, "");
            initListe();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int i = this.jList1.getSelectedIndex();
        this.openFrame4Index(i);
    }//GEN-LAST:event_jButton5ActionPerformed

    
    public void doTextAnalysis() { 
    
//    try {
//            FileWriter fw = null;
//            String lfile = jtLF.getText();
//            File fstat = new File( lfile + ".access_counts_per_group.dat" );
//            fw = new FileWriter( fstat );
//            BufferedWriter bw = new BufferedWriter( fw );
//            
//            HashSet hs = localNet.codes;
//            ArrayList al = new ArrayList();
//            for( Object o : hs ) {
//                al.add( o );
//            }
//            Collections.sort(al);
//            final String hl = "key" + "\t" + "#MR" + "\t" + "SUM(access)" + "\t" + "MW( access )";
//            System.out.println( hl) ;
//            fw.write( hl );
//            // TODO add your handling code here:
//            for( Object k : al ) {
//                
//                String key = (String)k;
//
//                double d = 0.0;
//                double mw = 0.0;
//                double s = 0;
//                
//                
//                Vector<Messreihe> cn = hash.get(key);
//                String name = key;
//                if ( cn != null ) {
//                    // System.out.println( key + " " + (cn!=null) + " " + cn.elementAt(0).yValues.size() );
//                    if ( cn.size() > 0 ) {
//                        Messreihe r = cn.elementAt(0);
//                        if ( r != null ) {
//                            name = r.label;
//                        }
//
//                        s = cn.size();
//                        d = summe( cn );
//                        mw = d / new Double( jtL.getText() );
//                    }    
//                }
//                else { 
//                    
//                }
//                DecimalFormat df = new DecimalFormat("0.00");
//                String line = key + "\t" + s + "\t" + df.format( d ) + "\t" + df.format( mw );
//                System.out.println( line);
//                bw.write( line );
//            }
//        } 
//        catch (IOException ex) {
//            Logger.getLogger(SequenceFileExplorer.class.getName()).log(Level.SEVERE, null, ex);
//        } 
    
    }
    
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        doTextAnalysis();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SequenceFileExplorer3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SequenceFileExplorer3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SequenceFileExplorer3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SequenceFileExplorer3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SequenceFileExplorer3().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JCheckBox jcbDT;
    private javax.swing.JCheckBox jcbMW;
    private javax.swing.JCheckBox jcbRATIO;
    private javax.swing.JCheckBox jcbRAW;
    private javax.swing.JCheckBox jcbWT;
    private javax.swing.JLabel jlL;
    private javax.swing.JLabel jlZ;
    private javax.swing.JTextField jtJAHR;
    private javax.swing.JTextField jtL;
    private javax.swing.JTextField jtLF;
    private javax.swing.JTextField jtMONAT;
    private javax.swing.JTextField jtTAG;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    String fn = null;

    private void getFileName() {
        fn = this.jTextField1.getText();
    }
    SequenceFile.Reader reader = null;
    Path path = null;
    FileSystem fs = null;
    Configuration config = null;
    boolean useHDFS = true;

    public void initFileSystem2( String f ) throws IOException {
        fn = f;
        initFileSystem();        
    }
        
    private void initFileSystem() throws IOException {
        config = new Configuration();

        System.out.println(">>HDFS<< :: " + fn);

        config.addResource(new Path("/etc/hadoop/conf/core-site.xml"));
        config.addResource(new Path("/etc/hadoop/conf/hdfs-site.xml"));

        fs = FileSystem.get(config);

        path = new Path(fn);
    }
    
    int z = 0;
    
    int binLevel = 0;
    
    int[] BINNING_RAW = { 1, 24, 24*7 };
    int[] BINNING_AV = { 24, 7, 4 };
    
    public void getMetaData2(String LISTFILE ) throws IOException {
        
        boolean multi = false;
        
        binLevel = 0;
        
        path = new Path(fn);

        reader = new SequenceFile.Reader(fs, path, config);

        System.out.println("==> current binning  aw   : " + BINNING_AV[ binLevel ] );
        System.out.println("==> current binning  raw  : " + BINNING_RAW[ binLevel ] );
        System.out.println("--> process bucket        : " + fn);
        System.out.println("--> compression-codes     : " + reader.getCompressionCodec());
        System.out.println("--> key-classename        : " + reader.getKeyClassName());
        System.out.println("--> value-classname       : " + reader.getValueClassName());

        // 
//        File file = new File(jtLF.getText());
        File file = new File( LISTFILE );
        int zz = initLastIndex(file);
        this.jlZ.setText("" + zz);

        localNet.loadListFile(file);

        if (multi) {

            z = Integer.parseInt(javax.swing.JOptionPane.showInputDialog(" Anzahl CN=", new Integer(zz)));
            for (int i = 0; i < z; i++) {

                al = new Vector<Messreihe>();
                bl = new Vector<Messreihe>();
                iwl = new Vector<Messreihe>();
                cn = new Vector<Messreihe>();

                hash.put((i + 1) + ".A.L", al);
                hash.put((i + 1) + ".B.L", bl);
                hash.put((i + 1) + ".CN", cn);
                hash.put((i + 1) + ".IWL", iwl);

            }
        } else {
            al = new Vector<Messreihe>();
            bl = new Vector<Messreihe>();
            iwl = new Vector<Messreihe>();
            cn = new Vector<Messreihe>();

            hash.put("A.L", al);
            hash.put("B.L", bl);
            hash.put("CN", cn);
            hash.put("IWL", iwl);

        }


    
    }

    public void getMetaData2(boolean multi) throws IOException {
        
        DefaultListModel dlm = new DefaultListModel();
        this.jList1.setModel(dlm);
        
        if ( this.jRadioButton3.isSelected() ) binLevel = 0;
        if ( this.jRadioButton1.isSelected() ) binLevel = 1;
        if ( this.jRadioButton2.isSelected() ) binLevel = 2;

        path = new Path(fn);

        reader = new SequenceFile.Reader(fs, path, config);

        System.out.println("==> current binning  aw   : " + BINNING_AV[ binLevel ] );
        System.out.println("==> current binning  raw  : " + BINNING_RAW[ binLevel ] );
        System.out.println("--> process bucket        : " + fn);
        System.out.println("--> compression-codes     : " + reader.getCompressionCodec());
        System.out.println("--> key-classename        : " + reader.getKeyClassName());
        System.out.println("--> value-classname       : " + reader.getValueClassName());

        // 
        File file = new File(jtLF.getText());
        int zz = initLastIndex(file);
        this.jlZ.setText("" + zz);

        localNet.loadListFile(file);

        if (multi) {

            z = Integer.parseInt(javax.swing.JOptionPane.showInputDialog(" Anzahl CN=", new Integer(zz)));
            for (int i = 0; i < z; i++) {

                al = new Vector<Messreihe>();
                bl = new Vector<Messreihe>();
                iwl = new Vector<Messreihe>();
                cn = new Vector<Messreihe>();

                hash.put((i + 1) + ".A.L", al);
                hash.put((i + 1) + ".B.L", bl);
                hash.put((i + 1) + ".CN", cn);
                hash.put((i + 1) + ".IWL", iwl);

            }
        } else {
            al = new Vector<Messreihe>();
            bl = new Vector<Messreihe>();
            iwl = new Vector<Messreihe>();
            cn = new Vector<Messreihe>();

            hash.put("A.L", al);
            hash.put("B.L", bl);
            hash.put("CN", cn);
            hash.put("IWL", iwl);

        }

    }
    Vector<Messreihe> al = null;
    Vector<Messreihe> bl = null;
    Vector<Messreihe> iwl = null;
    Vector<Messreihe> cn = null;
    Hashtable<String, Vector<Messreihe>> hash = new Hashtable<String, Vector<Messreihe>>();
    
    LocalWikipediaNetwork2 localNet = new LocalWikipediaNetwork2();

    public void listContent_AND_createSEQFILE(int j, String part) throws IOException {

        fs = FileSystem.get(config);

        path = new Path(fn);
        reader = new SequenceFile.Reader(fs, path, config);

        Vector<String> groups = new Vector<String>();


        int LIMIT = j;
        boolean goOn = true;
        int i = 0;
        int error = 0;
        while (goOn && i <= LIMIT) {

            Text key = new Text();
            Text val = new Text();

            goOn = reader.next(key);

            reader.getCurrentValue(val);

            Messreihe mr = new Messreihe();
            mr.setDescription(i + " ) " + fn + "_[" + key.toString() + "]");
            mr.setLabel( key.toString() );

            int J = Integer.parseInt(jtJAHR.getText());
            int M = Integer.parseInt(jtMONAT.getText());
            int T = Integer.parseInt(jtTAG.getText());

            int L = Integer.parseInt(jtL.getText());

            Calendar cal = new GregorianCalendar(J, M - 1, T, 0, 0);
//            Calendar cal = new GregorianCalendar(2007, 11, 1, 0, 0);
            int tsFRAME_days = L;
            int tsFRAME_hours = 24 * tsFRAME_days;


            try {
                Messreihe mr2 = expandTimeStampMap(val, cal, tsFRAME_hours, mr);

                if ( BINNING_RAW[binLevel] != 1) mr2 = mr2.setBinningX_sum( BINNING_RAW[binLevel] );
                
                if ( jcbWT.isSelected() ) { 
                    mr2 = mr2.normalizeByPeriodeTrend( mr2, 24*7 );
                }
                else if ( jcbDT.isSelected() ) { 
                    mr2 = mr2.normalizeByPeriodeTrend( mr2, 24 );
                }

                
                
                if ( jCheckBox1.isSelected() ) mr2.calcLog10_for_Y();
                
                String group = lookupGroupLabel(key);

                if (groups.contains(group)) {
                
                } 
                else {
                    groups.add(group);
                }

                if (group != null) {
                    // System.out.println("g=" + group);
                    Vector<Messreihe> vmr = hash.get(group);
                    if (vmr != null) {
                        vmr.add(mr2);
                    }

                    i = i + 1;
                }
            } catch (Exception ex) {
                Logger.getLogger(TSBucket.class.getName()).log(Level.SEVERE, null, ex);
                error = error + 1;
            }

            int code = 1;

        }
        System.out.println("--> nr of records     : " + (i - 1));
        System.out.println("--> groups            : " + groups.toString());



    }
            
            
    public void listContent(int j, String part) throws IOException {

        fs = FileSystem.get(config);

        path = new Path(fn);
        reader = new SequenceFile.Reader(fs, path, config);

        Vector<String> groups = new Vector<String>();


        int LIMIT = j;
        boolean goOn = true;
        int i = 0;
        int error = 0;
        while (goOn && i <= LIMIT) {

            Text key = new Text();
            Text val = new Text();

            goOn = reader.next(key);

            reader.getCurrentValue(val);

            Messreihe mr = new Messreihe();
            mr.setDescription(i + " ) " + fn + "_[" + key.toString() + "]");
            mr.setLabel( key.toString() );

            int J = Integer.parseInt(jtJAHR.getText());
            int M = Integer.parseInt(jtMONAT.getText());
            int T = Integer.parseInt(jtTAG.getText());

            int L = Integer.parseInt(jtL.getText());

            Calendar cal = new GregorianCalendar(J, M - 1, T, 0, 0);
//            Calendar cal = new GregorianCalendar(2007, 11, 1, 0, 0);
            int tsFRAME_days = L;
            int tsFRAME_hours = 24 * tsFRAME_days;


            try {
                Messreihe mr2 = expandTimeStampMap(val, cal, tsFRAME_hours, mr);

                if ( BINNING_RAW[binLevel] != 1) mr2 = mr2.setBinningX_sum( BINNING_RAW[binLevel] );
                
                if ( jcbWT.isSelected() ) { 
                    mr2 = mr2.normalizeByPeriodeTrend( mr2, 24*7 );
                }
                else if ( jcbDT.isSelected() ) { 
                    mr2 = mr2.normalizeByPeriodeTrend( mr2, 24 );
                }

                
                
                if ( jCheckBox1.isSelected() ) mr2.calcLog10_for_Y();
                
                String group = lookupGroupLabel(key);

                if (groups.contains(group)) {
                
                } 
                else {
                    groups.add(group);
                }

                if (group != null) {
                    // System.out.println("g=" + group);
                    Vector<Messreihe> vmr = hash.get(group);
                    if (vmr != null) {
                        vmr.add(mr2);
                    }

                    i = i + 1;
                }
            } catch (Exception ex) {
                Logger.getLogger(TSBucket.class.getName()).log(Level.SEVERE, null, ex);
                error = error + 1;
            }

            int code = 1;

        }
        System.out.println("--> nr of records     : " + (i - 1));
        System.out.println("--> groups            : " + groups.toString());



    }
    boolean initialized = false;

    private Messreihe expandTimeStampMap(Text val, Calendar calVON, int tsFRAME_hours, Messreihe mr) {
        String hash = val.toString().substring(1, val.toString().length() - 2);

        long t0 = calVON.getTimeInMillis();

        Calendar calBIS = (Calendar) calVON.clone();
        calBIS.add(Calendar.HOUR, tsFRAME_hours);

        if (!initialized) {
            System.out.println(calVON.getTime());
            System.out.println(calBIS.getTime());
            initialized = true;
        }

        double[] data = new double[tsFRAME_hours];
        for (int i = 0; i < tsFRAME_hours; i++) {
            data[i] = 0.0;
        }

        String[] pairs = hash.split(", ");
        for (String p : pairs) {
            String[] kv = p.split("=");
            Long k = Long.parseLong(kv[0]);
            Integer v = Integer.parseInt(kv[1]);
            Date d = new Date(k * 1000);
            if (d.after(calVON.getTime()) && d.before(calBIS.getTime())) {
                // System.out.println( d );
                long dt = (k * 1000) - t0;
                int i = (int) (dt / (1000 * 60 * 60));
                data[i] = v;
                // System.out.println( );
            };
        }

        for (int i = 0; i < tsFRAME_hours; i++) {
            mr.addValue(data[i]);
        }
        return mr;
    }

    private String lookupGroupLabel(Text key) {
        return localNet.getGroup(key);
    }

    private void sumUpData() {
    }

    private void sumUpData(int i) {
    }

    private void showCharts1() {
        MultiChart.open(al, "A.L", "t", "#access", false, getMrVectorInfo(al));
        MultiChart.open(bl, "B.L", "t", "#access", false, getMrVectorInfo(bl));
        MultiChart.open(iwl, "IWL", "t", "#access", false, getMrVectorInfo(iwl));
        MultiChart.open(cn, "CN", "t", "#access", false, getMrVectorInfo(cn));
    }

    private JComponent[] showChartsRAW(int i) {

        JComponent[] c = new JComponent[4];

        Vector<Messreihe> al = hash.get(i + "." + "A.L");
        Vector<Messreihe> bl = hash.get(i + "." + "B.L");
        Vector<Messreihe> iwl = hash.get(i + "." + "IWL");
        Vector<Messreihe> cn = hash.get(i + "." + "CN");

        if (al != null) {
            MultiChart mc = MultiChart.open2( al, i + " A.L", "t", "#access", false, getMrVectorInfo(al));
            c[0] = (JComponent) mc.cp;
        }
        if (bl != null) {
            MultiChart mc = MultiChart.open2( bl, i + " B.L", "t", "#access", false, getMrVectorInfo(bl));
            c[1] = (JComponent) mc.cp;
        }
        if (iwl != null) {
            MultiChart mc = MultiChart.open2( iwl, i + " IWL", "t", "#access", false, getMrVectorInfo(iwl));
            c[2] = (JComponent) mc.cp;
        }
        if (cn != null) {
            MultiChart mc = MultiChart.open2( cn, i + " CN", "t", "#access", false, getMrVectorInfo(cn));
            c[3] = (JComponent) mc.cp;
        }
        return c;
    }

    private void showChartsAV() {

        Vector<Messreihe> v = new Vector<Messreihe>();
        v.addAll(av(al,null, BINNING_AV[binLevel]));
        v.addAll(av(bl,null, BINNING_AV[binLevel]));
        v.addAll(av(iwl,null, BINNING_AV[binLevel]));
        v.addAll(av(cn,null, BINNING_AV[binLevel]));

        // String CN_Name = hash.get("CN").elementAt(0).label;
        MultiChart.open(v, "", "t", "<#access>", true, "");
    }

    private JComponent[] showChartsAV(int i) {

        Vector<Messreihe> al = hash.get(i + "." + "A.L");
        Vector<Messreihe> bl = hash.get(i + "." + "B.L");
        Vector<Messreihe> iwl = hash.get(i + "." + "IWL");
        Vector<Messreihe> cn = hash.get(i + "." + "CN");

        int B2 = 24;
        
        Vector<Messreihe> v = new Vector<Messreihe>();
        if (al != null) {
            v.addAll(av(al,null,BINNING_AV[binLevel]));
        }
        if (bl != null) {
            v.addAll(av(bl,null,BINNING_AV[binLevel]));
        }
        if (iwl != null) {
            v.addAll(av(iwl,null,BINNING_AV[binLevel]));
        }
        if (cn != null) {
            v.addAll(av(cn,null,BINNING_AV[binLevel]));
        }

        JComponent[] c = new JComponent[1];
        //String CN_Name = hash.get("CN").elementAt(0).label;
        MultiChart mc = MultiChart.open2(v, i + " AV", "t", "< log(access) >", true, "");
        c[0] = (JComponent) mc.cp;
        return c;
    }

    private void showChartsSUM() {
        MultiChart.open(sum(al), "A.L", "t", "log( #access )", false, getMrVectorInfo(al));
        MultiChart.open(sum(bl), "B.L", "t", "log( #access)", false, getMrVectorInfo(bl));
        MultiChart.open(sum(iwl), "IWL", "t", "log( #access)", false, getMrVectorInfo(iwl));
        MultiChart.open(sum(cn), "CN", "t", "log( #access)", false, getMrVectorInfo(cn));
    }

    private String getMrVectorInfo(Vector<Messreihe> al) {
        StringBuffer sb = new StringBuffer();
        sb.append(al.size() + " rows" + "\n\n");
        for (Messreihe mr : al) {
            sb.append(mr.summeY() + " : " + mr.getLabel() + "\n");
        }
        return sb.toString();
    }
    
    private Messreihe av2(Vector<Messreihe> al, String label) {
        int i = 0;
        Messreihe mr = new Messreihe();
        for (Messreihe m : al) {
            mr = mr.add(m);
            i++;
        }
        mr.divide_Y_by((double) i);
        mr.setLabel(label);
        
        mr = mr.setBinningX_sum( BINNING_AV[binLevel] );
        
        return mr;
    }

    private Vector<Messreihe> av(Vector<Messreihe> al, String label, int b2) {
        Vector<Messreihe> d = new Vector<Messreihe>();
        int i = 0;
        Messreihe mr = new Messreihe();
        for (Messreihe m : al) {
            mr = mr.add(m);
            i++;
        }
        mr.divide_Y_by((double) i);
        if ( label != null ) mr.setLabel(label);
        if ( b2 != 1) {
            mr = mr.setBinningX_sum(b2);
        }
        d.add(mr);
        return d;
    }

    private double summe(Vector<Messreihe> cn) {
        Messreihe mr = new Messreihe();
        for (Messreihe m : cn) {
            mr = mr.add(m);
            // System.out.println(" \t\t" + m.label );
        }
        double d = mr.sumYValues();
        return d;
    }
    
    private Vector<Messreihe> sum(Vector<Messreihe> cn) {
        Vector<Messreihe> d = new Vector<Messreihe>();
        Messreihe mr = new Messreihe();
        for (Messreihe m : al) {
            mr = mr.add(m);
        }
        d.add(mr);
        return d;
    }

//    private Vector<Messreihe> binning(Vector<Messreihe> v, int i, String l) {
//        Vector<Messreihe> b = new Vector<Messreihe>();
//        for (Messreihe m : v) {
//            m = m.setBinningX_sum(i);
//            m.setLabel(l);
//            b.add(m);
//        }
//        return b;
//    }

//    private Messreihe binning2(Vector<Messreihe> vv, int i, String l) {
//        Messreihe v = vv.elementAt(0).setBinningX_sum(i);
//        v.setLabel(l);
//        return v;
//    }

    private JComponent[] showChartsRatio(int i) {

        Vector<Messreihe> al = hash.get(i + "." + "A.L");
        Vector<Messreihe> bl = hash.get(i + "." + "B.L");
        Vector<Messreihe> iwl = hash.get(i + "." + "IWL");
        Vector<Messreihe> cn = hash.get(i + "." + "CN");

        Vector<Messreihe> v = new Vector<Messreihe>();

        Messreihe a2 = av2(al, i + ".A.L");
        Messreihe a1 = av2(cn, i + ".CN");

        Messreihe b2 = av2(bl, i + ".B.L");
        Messreihe b1 = av2(iwl, i + ".IWL");

        Messreihe r1LOCAL = a1.divide_by(a2);
        Messreihe r2GLOBAL = b1.divide_by(b2);

        v.add(r1LOCAL);
        v.add(r2GLOBAL);

        JComponent[] c = new JComponent[1];
        c[0] = new JPanel();

        Vector<Messreihe> vv = (Vector<Messreihe>) hash.get(i + ".CN");
        String CN_Name = "CN?";
        if (vv != null) {
            if (vv.size() > 0) {
                CN_Name = vv.elementAt(0).label;
                MultiChart mc = MultiChart.open2(v, CN_Name, "t", "RATIO", true, "");
                c[0] = (JComponent) mc.cp;

            }
        }

        //String CN_Name = hash.get("CN").elementAt(0).label;
        return c;
    }

    private void showChartsRatio() {
        Vector<Messreihe> v = new Vector<Messreihe>();

        Messreihe a2 = av2(al,"A.L");
        Messreihe a1 = av2(cn,"CN");

        Messreihe b2 = av2(bl,"B.L");
        Messreihe b1 = av2(iwl,"IWL");

        Messreihe r1LOCAL = a1.divide_by(a2);
        Messreihe r2GLOBAL = b1.divide_by(b2);

        v.add(r1LOCAL);
        v.add(r2GLOBAL);

        String CN_Name = hash.get("CN").elementAt(0).label;
        MultiChart.open(v, CN_Name, "t", "<#access>", true, "");
    }

    private int initLastIndex(File file) throws FileNotFoundException, IOException {
        int max = 0;
        BufferedReader br = new BufferedReader(new FileReader(file));
        while (br.ready()) {
            String line = br.readLine();
            if (line != null) {
//                System.out.println(line);
                String[] fields = line.split("\t");
//                System.out.println(fields[0]);

                int ix = fields[0].indexOf(".");

                String f2 = fields[0].substring(0, ix);

                int i = Integer.parseInt(f2);
//                System.out.println(i);
                if (i > max) {
                    max = i;
                }
            }
        }
        zCN = max;
        return max;
    }
    
    int zCN = 0;

//    private Vector<Messreihe> log(Vector<Messreihe> al) {
//        for (Messreihe mr : al) {
//            mr.calcLog10_for_Y();
//        }
//        return al;
//    }

    private void openFrame4Index(int i) {
        JComponent[][] charts = new JComponent[2][3];
        charts[0][0] = (JComponent) new JPanel();
        charts[1][0] = (JComponent) new JPanel();
//                charts[2][0] = (JComponent)new JPanel();
//                charts[3][0] = (JComponent)new JPanel();
        charts[0][1] = (JComponent) new JPanel();
        charts[1][1] = (JComponent) new JPanel();
//                charts[2][1] = (JComponent)new JPanel();
//                charts[3][1] = (JComponent)new JPanel();
        charts[0][2] = (JComponent) new JPanel();
        charts[1][2] = (JComponent) new JPanel();
//                charts[2][2] = (JComponent)new JPanel();
//                charts[3][2] = (JComponent)new JPanel();
//                charts[0][3] = (JComponent)new JPanel();
//                charts[1][3] = (JComponent)new JPanel();
//                charts[2][3] = (JComponent)new JPanel();
//                charts[3][3] = (JComponent)new JPanel();

//                if ( jcbSUM.isSelected() ) {
//                    sumUpData(i + 1);
//                }

        if (jcbMW.isSelected()) {
            JComponent[] c = showChartsAV(i + 1);
            charts[0][2] = c[0];
//                    charts[0][1] = c[1];
//                    charts[0][2] = c[2];
//                    charts[0][3] = c[3];

        }

        if (jcbRAW.isSelected()) {
            JComponent[] c = showChartsRAW(i + 1);
            charts[0][0] = c[0];
            charts[1][0] = c[1];
            charts[0][1] = c[3];
            charts[1][1] = c[2];
        }

        if (jcbRATIO.isSelected()) {
            JComponent[] c = showChartsRatio(i + 1);
            charts[1][2] = c[0];
        }

        ChartFrame cf = ChartFrame.open(charts, this.jList1.getSelectedValue().toString());
        cf.setSize(Toolkit.getDefaultToolkit().getScreenSize());
    }
    
    
 
    public void initListe2() { 
        for( int i = 0; i < zCN; i++ ) {
            String key = (i+1) + "." + "CN";
            Vector<Messreihe> cn = hash.get(key);
            String name = key;
            if ( cn != null ) {
                
                if ( cn.size() > 0 ) {
                    Messreihe r = cn.elementAt(0);
                    if ( r != null ) name = r.label;
                }
                System.out.println( name + " " + key + " " + (cn!=null) + " " + cn.elementAt(0).yValues.size() );

            }     
        }
    }
    
    private void initListe() {
        DefaultListModel dlm = (DefaultListModel) this.jList1.getModel();
        for( int i = 0; i < zCN; i++ ) {
            String key = (i+1) + "." + "CN";
            Vector<Messreihe> cn = hash.get(key);
            String name = key;
            if ( cn != null ) {
                // System.out.println( key + " " + (cn!=null) + " " + cn.elementAt(0).yValues.size() );

                if ( cn.size() > 0 ) {
                    Messreihe r = cn.elementAt(0);
                    if ( r != null ) name = r.label;
                }    
            }    
            dlm.addElement( name );
        }
    }

    public void loadData(String fn, String LISTFILE) throws IOException {
          initFileSystem2( fn );
          getMetaData2( LISTFILE );
          listContent(Integer.MAX_VALUE, "");
          initListe2();

    }

    public void setLocalNet(LocalWikipediaNetwork2 net) {
        localNet = net;
    }


}
